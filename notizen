BASE64 DECODE
main() {

  var decoder = new Map();

  var a = 'test';

  var i;
   // if (decoder.isEmpty) {
        var b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
            ignore = '= \f\n\r\t\u00A0\u2028\u2029';
        //decoder = [];
        for (i = 0; i < 64; ++i) {
         //decoder.b64[i], i);
          print(b64[i]);
          decoder[b64[i]] = i;
        }
        for (i = 0; i < ignore.length; ++i)
          decoder[ignore[i]] = -1;
   // }
  print("decoder");
  print(decoder);
    var out = [];
    var bits = 0, char_count = 0;
    for (i = 0; i < a.length; ++i) {
      print("ho");
        var c = a[i];
        if (c == '=')
            break;
      print("hi");
      print(decoder[c]);
        var c2 = decoder[c];
        if (c2 == -1)
            continue;
        if (c2 == null)
            throw 'Illegal character at offset ' + i;
        bits |= c2;
      print("ho2");
        if (++char_count >= 4) {
          print("h45");
          print(out);
            out.add(bits >> 16);
          print("ho4");
            out.add((bits >> 8) & 0xFF);
          print("ho3");
            out.add(bits & 0xFF);
          print("ho4");
            bits = 0;
            char_count = 0;
          print("ho6");
        } else {
          print("ho6");
            bits <<= 6;
        }
      print("ho8");
    }
    switch (char_count) {
      case 1:
        throw "Base64 encoding incomplete: at least 2 bits missing";
      case 2:
        out[out.length] = (bits >> 10);
        break;
      case 3:
        out[out.length] = (bits >> 16);
        out[out.length] = (bits >> 8) & 0xFF;
        break;
    }
    print(out);

  print("Hello, World!");
}